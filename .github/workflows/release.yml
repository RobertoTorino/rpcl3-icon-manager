name: CI Build and Release

on:
  push:
    tags:
      - 'v*'  # Triggers on tags like v1.0.0

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up UTF-8 and PowerShell output
        shell: pwsh
        run: |
          $OutputEncoding = [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          Write-Host "Using PowerShell version: $($PSVersionTable.PSVersion)"

      - name: Build EXE, gather assets, create ZIP
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'

          $repoRoot     = $env:GITHUB_WORKSPACE
          $ahkCompiler  = "ahk\Compiler\Ahk2Exe.exe"
          $baseFile     = "ahk\Compiler\Unicode 32-bit.bin"
          $input        = "rpcl3im.ahk"
          $outputName   = "rpcl3im.exe"
          $icon         = "rpcl3_media\rpcl3v2.ico"
          $zipName      = "rpcl3im_release.zip"

          $extraAssets = @(
            "README.txt", "rpcl3.ini", "LICENSE", "games.db",
            "sqlite3.dll", "version.txt", "version.dat", "version_template.txt"
          )
          $mediaFolder  = "rpcl3_media"
          $toolsFolder  = "rpcl3_tools"
          $emptyFolders = @("rpcl3_captures", "rpcl3_icons", "rpcl3_recordings", "rpcl3_screenshots")

          # Verify required files
          foreach ($file in @($ahkCompiler, $baseFile, $input)) {
            if (!(Test-Path $file)) {
              Write-Error "Missing required file: $file"
              exit 1
            }
            Write-Host ":: Found: $file"
          }

          # Compile
          & $ahkCompiler /in $input /out $outputName /icon $icon /base $baseFile
          if (!(Test-Path $outputName)) {
            Write-Error ":: Compilation failed: $outputName not found"
            exit 1
          }
          Write-Host ":: Compiled EXE: $outputName"

          # Move EXE to repo root
          $finalExe = Join-Path $repoRoot $outputName
          Move-Item $outputName $finalExe -Force

          # Optional: UPX compression
          $upxPath = "upx\upx.exe"
          if (Test-Path $upxPath) {
            & $upxPath --best --lzma $finalExe
            Write-Host ":: Compressed with UPX"
          } else {
            Write-Host ":: UPX not found, skipping compression"
          }

          # Gather all files for ZIP
          $toZip = @($finalExe)

          foreach ($asset in $extraAssets) {
            $path = Join-Path $repoRoot $asset
            if (Test-Path $path) {
              $toZip += $path
              Write-Host ":: Added asset: $asset"
            } else {
              Write-Warning "Missing asset: $asset"
            }
          }

          foreach ($folder in @($mediaFolder, $toolsFolder)) {
            if (Test-Path $folder) {
              $files = Get-ChildItem -Path $folder -Recurse -File | Select-Object -ExpandProperty FullName
              $toZip += $files
              Write-Host ":: Added folder: $folder"
            } else {
              Write-Warning "Missing folder: $folder"
            }
          }

          # Create empty .placeholder files
          foreach ($folder in $emptyFolders) {
            $full = Join-Path $repoRoot $folder
            if (!(Test-Path $full)) {
              New-Item -ItemType Directory -Path $full -Force | Out-Null
            }
            $placeholder = Join-Path $full ".placeholder"
            New-Item -ItemType File -Path $placeholder -Force | Out-Null
            $toZip += $placeholder
            Write-Host ":: Created: $placeholder"
          }

          # Create the ZIP
          $zipPath = Join-Path $repoRoot $zipName
          Compress-Archive -Path $toZip -DestinationPath $zipPath -Force
          Write-Host ":: ZIP created at $zipPath"

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            rpcl3im.exe
            rpcl3im_release.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
