name: CI Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0

jobs:
  build:
#    fail-fast: true
    runs-on: windows-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up UTF-8 and PowerShell output
        shell: pwsh
        run: |
          $OutputEncoding = [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          Write-Host "Using PowerShell version: $($PSVersionTable.PSVersion)"

      - name: Build EXE, move to root, UPX and create ZIP
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'

          $ahkCompiler    = "ahk\Compiler\Ahk2Exe.exe"
          $baseFile       = "ahk\Compiler\Unicode 32-bit.bin"
          $input          = "rpcl3im.ahk"
          $repoRoot       = $env:GITHUB_WORKSPACE
          $output         = Join-Path $repoRoot "rpcl3im.exe"
          $zipName        = "rpcl3im_release.zip"
          $icon           = "rpcl3_media\rpcl3v2.ico"
          $versionTxt     = "version.txt"
          $versionDat     = "version.dat"
          $versionTpl     = "version_template.txt"
          $sqliteDll      = "sqlite3.dll"
          $mediaFolder    = "rpcl3_media"
          $toolsFolder    = "rpcl3_tools"
          $emptyFolders   = @("rpcl3_captures","rpcl3_icons","rpcl3_recordings","rpcl3_screenshots")
          $extraAssets    = @("README.txt", "rpcl3.ini", "LICENSE", "games.db", $sqliteDll, $versionTxt, $versionDat, $versionTpl)
          $allFiles       = @()

          foreach ($file in @($ahkCompiler, $baseFile, $input)) {
            if (!(Test-Path $file)) {
              Write-Error "Required file not found: $file"
              exit 1
            }
            Write-Host ":: Found: $file"
          }

          # --- Compile ---
          Write-Host ":: Starting AHK compilation"          
          & $ahkCompiler /in $input /out $output /icon $icon /base $baseFile

          # --- Always move EXE to $env:GITHUB_WORKSPACE ---
          $repoRoot = $env:GITHUB_WORKSPACE
          $compiledExe = Join-Path $PWD $output
          $finalExe    = Join-Path $repoRoot $output

            if (!(Test-Path $output)) {
            Write-Error ":: Ahk2Exe did not produce an output file at $output."
            exit 1
          }
            Write-Host ":: Successfully compiled as $output"

          # Add media folder files
          if (Test-Path $mediaFolder) {
            $mediaFiles = Get-ChildItem -Path $mediaFolder -File | ForEach-Object { $_.FullName }
            if ($mediaFiles) {
              $allFiles += $mediaFiles
              Write-Host "Added $($mediaFiles.Count) files from $mediaFolder"
            }
          } else {
            Write-Host "Warning: $mediaFolder not found!" -ForegroundColor Yellow
          }

          # Add tools folder files
          if (Test-Path $toolsFolder) {
            $toolsFiles = Get-ChildItem -Path $toolsFolder -Recurse | Where-Object { !$_.PSIsContainer } | ForEach-Object { $_.FullName }
            if ($toolsFiles) {
              $allFiles += $toolsFiles
              Write-Host "Added $($toolsFiles.Count) files from $toolsFolder"
            }
          } else {
            Write-Host "Warning: $toolsFolder not found!" -ForegroundColor Yellow
          }

          # Add placeholder files for empty folders
          foreach ($folder in $emptyFolders) {
            if (-not (Test-Path $folder)) {
              New-Item -ItemType Directory -Path $folder -Force | Out-Null
            }
            $placeholderPath = "$folder\.placeholder"
            New-Item -Path $placeholderPath -ItemType File -Force | Out-Null
            $allFiles += $placeholderPath
            Write-Host "Added placeholder: $placeholderPath"
          }

          # Clean up any missing files from allFiles
          $allFiles = $allFiles | Where-Object { $_ -and (Test-Path $_) }

          # --- UPX ---
          if (Test-Path "upx\upx.exe") {
            & "upx\upx.exe" --best --lzma $finalExe
          }

          # --- ZIP ---
          $toZip = @($finalExe)
          foreach ($asset in $extraAssets) {
            $assetAbs = Join-Path $repoRoot $asset
            if (Test-Path $assetAbs) {
              $toZip += $assetAbs
              Write-Host ":: Added to zip: $assetAbs"
            } else {
              Write-Warning "Not adding (missing): $assetAbs"
            }
          }
          $zipPath = Join-Path $repoRoot $zipName
          Compress-Archive -Path $toZip -DestinationPath $zipPath -Force

      - name: Upload EXE and ZIP to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            rpcl3im.exe
            rpcl3im_release.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
